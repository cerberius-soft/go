// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EmailValidationRequestData(params *EmailValidationRequestDataParams, opts ...ClientOption) (*EmailValidationRequestDataOK, error)

	IPLookupRequestData(params *IPLookupRequestDataParams, opts ...ClientOption) (*IPLookupRequestDataOK, error)

	PromptCheckRequestData(params *PromptCheckRequestDataParams, opts ...ClientOption) (*PromptCheckRequestDataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	EmailValidationRequestData emails validation

	Validate a list of email addresses

Requires all authentication fields to be present in the header.
*/
func (a *Client) EmailValidationRequestData(params *EmailValidationRequestDataParams, opts ...ClientOption) (*EmailValidationRequestDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailValidationRequestDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "emailValidationRequestData",
		Method:             "POST",
		PathPattern:        "/email-lookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailValidationRequestDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailValidationRequestDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailValidationRequestDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IPLookupRequestData lookups information on IP addresses

Requires all authentication fields to be present in the header.
*/
func (a *Client) IPLookupRequestData(params *IPLookupRequestDataParams, opts ...ClientOption) (*IPLookupRequestDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPLookupRequestDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ipLookupRequestData",
		Method:             "POST",
		PathPattern:        "/ip-lookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IPLookupRequestDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPLookupRequestDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IPLookupRequestDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PromptCheckRequestData prompts check

	Check if a prompt is malicioius

Requires all authentication fields to be present in the header.
*/
func (a *Client) PromptCheckRequestData(params *PromptCheckRequestDataParams, opts ...ClientOption) (*PromptCheckRequestDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromptCheckRequestDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promptCheckRequestData",
		Method:             "POST",
		PathPattern:        "/prompt-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PromptCheckRequestDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromptCheckRequestDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PromptCheckRequestDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
